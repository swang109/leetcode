class Solution {
public:
    int numDistinct(string s, string t) {
        int sl = s.length();
        int tl = t.length();
        if(tl>sl) return 0;
        vector<vector<int>> DP(sl+1, vector<int>(tl+1, 0));
        for(int k=0;k<=sl;k++){
            DP[k][0]=1;
        }
        for(int i=1;i<=sl;i++){
            for(int j=1;j<=tl;j++){
                DP[i][j]=DP[i-1][j]+(s[i-1]==t[j-1]?DP[i-1][j-1]:0);
            }
        }
        return DP[sl][tl];
    }
};


/**
 * MY matrix is rotated from the discreption
 * Solution (DP):
 * We keep a m*n matrix and scanning through string S, while
 * m = T.length() + 1 and n = S.length() + 1
 * and each cell in matrix Path[i][j] means the number of distinct subsequences of 
 * T.substr(1...i) in S(1...j)
 * 
 * Path[i][j] = Path[i][j-1]            (discard S[j])
 *              +     Path[i-1][j-1]    (S[j] == T[i] and we are going to use S[j])
 *                 or 0                 (S[j] != T[i] so we could not use S[j])
 * while Path[0][j] = 1 and Path[i][0] = 0.
 */
